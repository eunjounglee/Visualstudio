using System;
// 04. 배열의 특징은 순서대로 저장되는것
namespace BaseBall
{
    class Program
    {
        const int MaxValue = 10; //03. 코드의 가독성이 좋아짐
        const int Digit = 3; //03. find all reference : Digit가 사용된 모든 레코드를 보여줌

        static void Main(string[] args)
        { // 01. 정답, 추측, 결과
          // 01. 배열은 0부터 시작한다. 0부터 설정해보기
          // 1. (중복되지 않는 세 개의 0~9 사이의 정수로 이루어진 정답을 생성한다.
            Random random = new Random(); // Random이라는 공간을 만듬
                                          // Random random2; >> 공간을 만들지 않았음
            int answer0;
            int answer1;
            int answer2;
            while (true)
            {
                answer0 = random.Next(MaxValue);
                answer1 = random.Next(MaxValue);
                answer2 = random.Next(MaxValue);
                if (answer0 != answer1 && answer1 != answer2 && answer2 != answer0)
                    break;
                
            }
            //02. Console.WriteLine("[정답]");
            //02. Console.Write(answer0 + " "); = Console.WriteLine(answer0); => 오류. 지역변수라 answer0이라는 이름이 없음 
            //02. Console.Write(answer1 + " ");
            //02. Console.Write(answer2 + " ");
            //02. Console.WriteLine();

            int tryCount = 0;

            while (true)
            {
                tryCount++;
                // 2. 추측을 입력받는다.
                int guess0 = int.Parse(Console.ReadLine());
                int guess1 = Convert.ToInt32(Console.ReadLine());
                int guess2 = Convert.ToInt32(Console.ReadLine());
                //int guess0 := Console.ReadLine(); readline은 문자열구를 반환 ->숫자구로 바꿔야함

                // 02. Console.WriteLine("[추측] ");
                // 02. Console.Write(guess0 + " ");
                // 02. Console.Write(guess1 + " ");
                // 02. Console.Write(guess2 + " ");
                // 02. Console.WriteLine();


                // 3. 정답과 추측을 비교하여 결과를 생성한다.

                int strike = 0;
                int ball = 0;
                int @out = 0;

                if (answer0 == guess0)
                    strike++;
                else if (answer0 == guess1 || answer0 == guess2)
                    ball++;
                else
                    @out++;

                if (answer1 == guess1)
                    strike++;
                else if (answer1 == guess2 || answer1 == guess0)
                    ball++;
                else
                    @out++;

                if (answer2 == guess2)
                    strike++;
                else if (answer2 == guess0 || answer2 == guess1)
                    ball++;
                else
                    @out++;

                // 4. 결과를 출력한다.
                Console.WriteLine($"S: {strike}, B: {ball}, O: {@out}"); // STRING INTERPOLATION

                // 5. 정답과 추측이 일치하지 않으면 2번으로 돌아간다.
                if (strike == Digit)
                    break;
            }

            // 6. 정답을 맞추는데 소요된 시간을 출력하고 종료한다.
            Console.WriteLine($"S: 총 {tryCount} 번만에 출력하였습니다.");

        }
    }
}












break와 continye문 공부해보기

Random random = new Random(3);
하면 268만 계속 반복됨

streat type
type language
int, 문자열을 나타내는 타입은 서로 호환이 안됨.
C언어는 형이 아주 엄격하다
타입의 검사를 컴파일할 때 
컴파일 타임 : 컴파일하는 시점
런 타임 : 실행될 때

static type/compile type

c#을 설계한 계발자는 왜 언어를 정적 타입으로 만들었을까**
큰 규모의 프로그램을 만들때는 압도적으로 유리하다.
조그마한것을 만들 때는 호환이 잘 안되는게 힘들지만, enterprize급의 소프트웨어를 만들 때는 정적타입이 훨씬 유리하다. 복잡도를 대폭 줄일 수 있기 때문***





버그가 런 타임에만 잡히는 언어가 있고 컴파일 타임에만 잡히는 경우가 있음


자바는 타입이 없다.





숫자는 1,0,-1 외의 숫자는 코드에서 안나오는게 일반적으로 추천하는 방법
MAGIC NUMBER : Hardcording. 제거해야함

배열을 만들면 같은 구조의 더러운 소스를 이쁘고 간략하게 만들 수 있음

백터의 의미 : 여러개의 값
program language에서 배열 : 벡터. 동적배열 : 벡터

uniti에서 좌표를 표현할 때 스칼라좌표 3개가 모여서 좌표가 생성될 때 이것을 백터라고 함

C#에서 배열보다 더 유용한 자료구조가 훨씬 많다. List 를 사용하는것이 편함